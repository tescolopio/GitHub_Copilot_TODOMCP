{
  "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
  "steps": [
    {
      "stepNumber": 1,
      "action": {
        "id": "3de918e2-4566-40f1-9e94-6b1aba91a26f",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: add comment explaining this method",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 5,
        "timestamp": "2025-07-31T06:36:22.755Z",
        "metadata": {
          "todoText": "add comment explaining this method",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:22.758Z",
          "endTime": "2025-07-31T06:36:22.767Z",
          "duration": 9,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-5-1753943782750",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 5,
          "column": 2,
          "content": "add comment explaining this method",
          "context": {
            "before": [
              "export class StringUtils {",
              "t",
              "t"
            ],
            "after": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:22.756Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}"
    },
    {
      "stepNumber": 2,
      "action": {
        "id": "af12eee1-dada-4639-8ec8-3ef56abbf967",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: fix formatting",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 9,
        "timestamp": "2025-07-31T06:36:31.406Z",
        "metadata": {
          "todoText": "fix formatting",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:31.407Z",
          "endTime": "2025-07-31T06:36:31.424Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action af12eee1-dada-4639-8ec8-3ef56abbf967: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: fix formatting\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-9-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 9,
          "column": 2,
          "content": "fix formatting",
          "context": {
            "before": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ],
            "after": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:31.406Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 3,
      "action": {
        "id": "98263e4d-7778-4953-a6d9-b52dbccf0597",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation with examples",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 13,
        "timestamp": "2025-07-31T06:36:31.460Z",
        "metadata": {
          "todoText": "update documentation with examples",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:31.461Z",
          "endTime": "2025-07-31T06:36:31.482Z",
          "duration": 2,
          "output": "e",
          "error": "Git Error: Failed to commit changes for action 98263e4d-7778-4953-a6d9-b52dbccf0597: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation with examples\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-13-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 13,
          "column": 2,
          "content": "update documentation with examples",
          "context": {
            "before": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ],
            "after": [
              "  static truncate(str: string, maxLength: number): string {",
              "    if (str.length <= maxLength) {",
              "      return str;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:31.461Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 4,
      "action": {
        "id": "87d31134-93b7-4ac8-8c89-9262525a3da6",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: Add comment about this method functionality",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 5,
        "timestamp": "2025-07-31T06:36:31.491Z",
        "metadata": {
          "todoText": "Add comment about this method functionality",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:31.492Z",
          "endTime": "2025-07-31T06:36:31.493Z",
          "duration": 1,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-5-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 5,
          "column": 2,
          "content": "Add comment about this method functionality",
          "context": {
            "before": [
              "// Contains properly formatted TODOs to test safety thresholds",
              "export class TestClass {",
              "t"
            ],
            "after": [
              "  testMethod() {",
              "    return 'test';",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:31.491Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}"
    },
    {
      "stepNumber": 5,
      "action": {
        "id": "b43ad145-2d38-4024-8303-21ff839d6a95",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: Fix formatting in this code block",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 9,
        "timestamp": "2025-07-31T06:36:41.522Z",
        "metadata": {
          "todoText": "Fix formatting in this code block",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.524Z",
          "endTime": "2025-07-31T06:36:41.543Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action b43ad145-2d38-4024-8303-21ff839d6a95: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: Fix formatting in this code block\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-9-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 9,
          "column": 2,
          "content": "Fix formatting in this code block",
          "context": {
            "before": [
              "  testMethod() {",
              "    return 'test';",
              "  }"
            ],
            "after": [
              "  badlyFormatted() {",
              "    let    x   =    1;",
              "      return     x;"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.523Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 6,
      "action": {
        "id": "e62b58cd-6cd4-4e68-964b-7affe01eaa7d",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: Update documentation for this complex algorithm",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 19,
        "timestamp": "2025-07-31T06:36:41.550Z",
        "metadata": {
          "todoText": "Update documentation for this complex algorithm",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.551Z",
          "endTime": "2025-07-31T06:36:41.570Z",
          "duration": 1,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action e62b58cd-6cd4-4e68-964b-7affe01eaa7d: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: Update documentation for this complex algorithm\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-19-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 19,
          "column": 2,
          "content": "Update documentation for this complex algorithm",
          "context": {
            "before": [
              "    // Would use lodash here",
              "    return [];",
              "  }"
            ],
            "after": [
              "  complexAlgorithm() {",
              "    // Complex logic here",
              "    return 42;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.550Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 7,
      "action": {
        "id": "3f543d0b-d1ee-49df-98d5-91ed23ad0b0e",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: add comment about initialization",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
        "lineNumber": 21,
        "timestamp": "2025-07-31T06:36:41.575Z",
        "metadata": {
          "todoText": "add comment about initialization",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.576Z",
          "endTime": "2025-07-31T06:36:41.624Z",
          "duration": 3,
          "output": "Added comment: i",
          "error": "Validation Error: Validation failed: Sorry: IndentationError: expected an indented block after function definition on line 20 (.temp-1753943801580.py, line 21)"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "processor.py-21-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "line": 21,
          "column": 8,
          "content": "add comment about initialization",
          "context": {
            "before": [
              "",
              "class DataProcessor:",
              "    def __init__(self):"
            ],
            "after": [
              "        self.data = []",
              "    ",
              "    def add_item(self, item):"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "# Sample Python module for testing\n\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number\n    TODO: add input validation for negative numbers\n    \"\"\"\n    if n <= 1:\n        return n\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome\n    TODO: fix formatting and make case-insensitive\n    \"\"\"\n    return s==s[::-1]\n\nclass DataProcessor:\n    def __init__(self):\n        # TODO: add comment about initialization\n        self.data = []\n    \n    def add_item(self, item):\n        # TODO: update documentation with type hints\n        self.data.append(item)\n    \n    def process_data(self):\n        # TODO: rename process_data to transform_data\n        return [item.upper() if isinstance(item, str) else item for item in self.data]\n    \n    def get_stats(self):\n        # TODO: implement proper statistics calculation\n        return {\n            'count': len(self.data),\n            'types': list(set(type(item).__name__ for item in self.data))\n        }\n",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.575Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 8,
      "action": {
        "id": "2f4914df-df1f-49e6-a176-9b5b4df1169d",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation with type hints",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
        "lineNumber": 25,
        "timestamp": "2025-07-31T06:36:41.629Z",
        "metadata": {
          "todoText": "update documentation with type hints",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.630Z",
          "endTime": "2025-07-31T06:36:41.691Z",
          "duration": 2,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action 2f4914df-df1f-49e6-a176-9b5b4df1169d: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation with type hints\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "processor.py-25-1753943782751",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "line": 25,
          "column": 8,
          "content": "update documentation with type hints",
          "context": {
            "before": [
              "        self.data = []",
              "    ",
              "    def add_item(self, item):"
            ],
            "after": [
              "        self.data.append(item)",
              "    ",
              "    def process_data(self):"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "# Sample Python module for testing\n\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number\n    TODO: add input validation for negative numbers\n    \"\"\"\n    if n <= 1:\n        return n\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome\n    TODO: fix formatting and make case-insensitive\n    \"\"\"\n    return s==s[::-1]\n\nclass DataProcessor:\n    def __init__(self):\n        # TODO: add comment about initialization\n        self.data = []\n    \n    def add_item(self, item):\n        # TODO: update documentation with type hints\n        self.data.append(item)\n    \n    def process_data(self):\n        # TODO: rename process_data to transform_data\n        return [item.upper() if isinstance(item, str) else item for item in self.data]\n    \n    def get_stats(self):\n        # TODO: implement proper statistics calculation\n        return {\n            'count': len(self.data),\n            'types': list(set(type(item).__name__ for item in self.data))\n        }\n",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.629Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 9,
      "action": {
        "id": "5202480e-e012-4044-89d2-dcdcba2955f6",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: fix formatting issues here",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
        "lineNumber": 14,
        "timestamp": "2025-07-31T06:36:41.703Z",
        "metadata": {
          "todoText": "fix formatting issues here",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.705Z",
          "endTime": "2025-07-31T06:36:41.724Z",
          "duration": 2,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action 5202480e-e012-4044-89d2-dcdcba2955f6: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: fix formatting issues here\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "calculator.js-14-1753943782752",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "line": 14,
          "column": 4,
          "content": "fix formatting issues here",
          "context": {
            "before": [
              "    return result;",
              "  }",
              "  subtract(a, b) {"
            ],
            "after": [
              "    const result = a - b;",
              "    this.history.push({ operation: 'subtract', a, b, result });",
              "    return result;"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample JavaScript file for testing TODO detection\nclass Calculator {\n  constructor() {\n    // TODO: add proper initialization\n    this.history = [];\n  }\n  add(a, b) {\n    // TODO: add input validation\n    const result = a + b;\n    this.history.push({ operation: 'add', a, b, result });\n    return result;\n  }\n  subtract(a, b) {\n    // TODO: fix formatting issues here\n    const result = a - b;\n    this.history.push({ operation: 'subtract', a, b, result });\n    return result;\n  }\n  multiply(a, b) {\n    // TODO: update documentation for this method\n    const result = a * b;\n    this.history.push({ operation: 'multiply', a, b, result });\n    return result;\n  }\n  divide(a, b) {\n    // TODO: handle division by zero\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    const result = a / b;\n    this.history.push({ operation: 'divide', a, b, result });\n    return result;\n  }\n  getHistory() {\n    // TODO: rename getHistory to getCalculationHistory\n    return this.history;\n  }\n  clearHistory() {\n    // TODO: implement proper cleanup logic\n    this.history = [];\n  }\n}\nmodule.exports = Calculator;",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.703Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 10,
      "action": {
        "id": "678aa2e0-2649-4ec7-a1d3-2e469c49501c",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation for this method",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
        "lineNumber": 20,
        "timestamp": "2025-07-31T06:36:41.733Z",
        "metadata": {
          "todoText": "update documentation for this method",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.734Z",
          "endTime": "2025-07-31T06:36:41.750Z",
          "duration": 2,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action 678aa2e0-2649-4ec7-a1d3-2e469c49501c: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation for this method\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "calculator.js-20-1753943782752",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "line": 20,
          "column": 4,
          "content": "update documentation for this method",
          "context": {
            "before": [
              "    return result;",
              "  }",
              "  multiply(a, b) {"
            ],
            "after": [
              "    const result = a * b;",
              "    this.history.push({ operation: 'multiply', a, b, result });",
              "    return result;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Sample JavaScript file for testing TODO detection\nclass Calculator {\n  constructor() {\n    // TODO: add proper initialization\n    this.history = [];\n  }\n  add(a, b) {\n    // TODO: add input validation\n    const result = a + b;\n    this.history.push({ operation: 'add', a, b, result });\n    return result;\n  }\n  subtract(a, b) {\n    // TODO: fix formatting issues here\n    const result = a - b;\n    this.history.push({ operation: 'subtract', a, b, result });\n    return result;\n  }\n  multiply(a, b) {\n    // TODO: update documentation for this method\n    const result = a * b;\n    this.history.push({ operation: 'multiply', a, b, result });\n    return result;\n  }\n  divide(a, b) {\n    // TODO: handle division by zero\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    const result = a / b;\n    this.history.push({ operation: 'divide', a, b, result });\n    return result;\n  }\n  getHistory() {\n    // TODO: rename getHistory to getCalculationHistory\n    return this.history;\n  }\n  clearHistory() {\n    // TODO: implement proper cleanup logic\n    this.history = [];\n  }\n}\nmodule.exports = Calculator;",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.733Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 11,
      "action": {
        "id": "f9a094cd-e2ed-4842-ad2f-ed704f08bc04",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: add comment explaining this method",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 6,
        "timestamp": "2025-07-31T06:36:41.770Z",
        "metadata": {
          "todoText": "add comment explaining this method",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:41.772Z",
          "endTime": "2025-07-31T06:36:41.774Z",
          "duration": 2,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-6-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 6,
          "column": 2,
          "content": "add comment explaining this method",
          "context": {
            "before": [
              "t",
              "t",
              "t"
            ],
            "after": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:41.770Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}"
    },
    {
      "stepNumber": 12,
      "action": {
        "id": "7400fe3c-97ea-4e3e-ac27-c55e1da4550c",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: fix formatting",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 10,
        "timestamp": "2025-07-31T06:36:51.812Z",
        "metadata": {
          "todoText": "fix formatting",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:51.813Z",
          "endTime": "2025-07-31T06:36:51.827Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action 7400fe3c-97ea-4e3e-ac27-c55e1da4550c: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: fix formatting\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-10-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 10,
          "column": 2,
          "content": "fix formatting",
          "context": {
            "before": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ],
            "after": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:51.812Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 13,
      "action": {
        "id": "7ee7df51-6bee-4ba4-9e2d-e6d00b3b72da",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation with examples",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 14,
        "timestamp": "2025-07-31T06:36:51.832Z",
        "metadata": {
          "todoText": "update documentation with examples",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:51.834Z",
          "endTime": "2025-07-31T06:36:51.852Z",
          "duration": 1,
          "output": "e",
          "error": "Git Error: Failed to commit changes for action 7ee7df51-6bee-4ba4-9e2d-e6d00b3b72da: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation with examples\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-14-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 14,
          "column": 2,
          "content": "update documentation with examples",
          "context": {
            "before": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ],
            "after": [
              "  static truncate(str: string, maxLength: number): string {",
              "    if (str.length <= maxLength) {",
              "      return str;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:51.833Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 14,
      "action": {
        "id": "067092a5-3fd2-48bb-808a-af03aca129bf",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: Add comment about this method functionality",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 6,
        "timestamp": "2025-07-31T06:36:51.861Z",
        "metadata": {
          "todoText": "Add comment about this method functionality",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:36:51.862Z",
          "endTime": "2025-07-31T06:36:51.864Z",
          "duration": 2,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-6-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 6,
          "column": 2,
          "content": "Add comment about this method functionality",
          "context": {
            "before": [
              "export class TestClass {",
              "t",
              "t"
            ],
            "after": [
              "  testMethod() {",
              "    return 'test';",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:36:51.861Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}"
    },
    {
      "stepNumber": 15,
      "action": {
        "id": "2e69b08e-e69e-4a35-8906-a1eb9e4a1795",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: Fix formatting in this code block",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 10,
        "timestamp": "2025-07-31T06:37:00.386Z",
        "metadata": {
          "todoText": "Fix formatting in this code block",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.388Z",
          "endTime": "2025-07-31T06:37:00.403Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action 2e69b08e-e69e-4a35-8906-a1eb9e4a1795: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: Fix formatting in this code block\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-10-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 10,
          "column": 2,
          "content": "Fix formatting in this code block",
          "context": {
            "before": [
              "  testMethod() {",
              "    return 'test';",
              "  }"
            ],
            "after": [
              "  badlyFormatted() {",
              "    let    x   =    1;",
              "      return     x;"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.387Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 16,
      "action": {
        "id": "2d8eda4d-4e87-41e2-8b24-84888091875d",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: Update documentation for this complex algorithm",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 20,
        "timestamp": "2025-07-31T06:37:00.410Z",
        "metadata": {
          "todoText": "Update documentation for this complex algorithm",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.412Z",
          "endTime": "2025-07-31T06:37:00.429Z",
          "duration": 2,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action 2d8eda4d-4e87-41e2-8b24-84888091875d: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: Update documentation for this complex algorithm\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-20-1753943801768",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 20,
          "column": 2,
          "content": "Update documentation for this complex algorithm",
          "context": {
            "before": [
              "    // Would use lodash here",
              "    return [];",
              "  }"
            ],
            "after": [
              "  complexAlgorithm() {",
              "    // Complex logic here",
              "    return 42;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.411Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 17,
      "action": {
        "id": "2bb92249-5eeb-42c7-a47e-f0f5b3aa8ba1",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: add comment about initialization",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
        "lineNumber": 21,
        "timestamp": "2025-07-31T06:37:00.434Z",
        "metadata": {
          "todoText": "add comment about initialization",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.435Z",
          "endTime": "2025-07-31T06:37:00.476Z",
          "duration": 2,
          "output": "Added comment: i",
          "error": "Validation Error: Validation failed: Sorry: IndentationError: expected an indented block after function definition on line 20 (.temp-1753943820437.py, line 21)"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "processor.py-21-1753943801769",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "line": 21,
          "column": 8,
          "content": "add comment about initialization",
          "context": {
            "before": [
              "",
              "class DataProcessor:",
              "    def __init__(self):"
            ],
            "after": [
              "        self.data = []",
              "    ",
              "    def add_item(self, item):"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "# Sample Python module for testing\n\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number\n    TODO: add input validation for negative numbers\n    \"\"\"\n    if n <= 1:\n        return n\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome\n    TODO: fix formatting and make case-insensitive\n    \"\"\"\n    return s==s[::-1]\n\nclass DataProcessor:\n    def __init__(self):\n        # TODO: add comment about initialization\n        self.data = []\n    \n    def add_item(self, item):\n        # TODO: update documentation with type hints\n        self.data.append(item)\n    \n    def process_data(self):\n        # TODO: rename process_data to transform_data\n        return [item.upper() if isinstance(item, str) else item for item in self.data]\n    \n    def get_stats(self):\n        # TODO: implement proper statistics calculation\n        return {\n            'count': len(self.data),\n            'types': list(set(type(item).__name__ for item in self.data))\n        }\n",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.434Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 18,
      "action": {
        "id": "c9655126-b9e9-4ee5-88b4-0c5c10a9313d",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation with type hints",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
        "lineNumber": 25,
        "timestamp": "2025-07-31T06:37:00.481Z",
        "metadata": {
          "todoText": "update documentation with type hints",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.482Z",
          "endTime": "2025-07-31T06:37:00.536Z",
          "duration": 1,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action c9655126-b9e9-4ee5-88b4-0c5c10a9313d: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation with type hints\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "processor.py-25-1753943801769",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/processor.py",
          "line": 25,
          "column": 8,
          "content": "update documentation with type hints",
          "context": {
            "before": [
              "        self.data = []",
              "    ",
              "    def add_item(self, item):"
            ],
            "after": [
              "        self.data.append(item)",
              "    ",
              "    def process_data(self):"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "# Sample Python module for testing\n\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number\n    TODO: add input validation for negative numbers\n    \"\"\"\n    if n <= 1:\n        return n\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome\n    TODO: fix formatting and make case-insensitive\n    \"\"\"\n    return s==s[::-1]\n\nclass DataProcessor:\n    def __init__(self):\n        # TODO: add comment about initialization\n        self.data = []\n    \n    def add_item(self, item):\n        # TODO: update documentation with type hints\n        self.data.append(item)\n    \n    def process_data(self):\n        # TODO: rename process_data to transform_data\n        return [item.upper() if isinstance(item, str) else item for item in self.data]\n    \n    def get_stats(self):\n        # TODO: implement proper statistics calculation\n        return {\n            'count': len(self.data),\n            'types': list(set(type(item).__name__ for item in self.data))\n        }\n",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.481Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 19,
      "action": {
        "id": "a4312f1e-50d9-4e11-91c9-4d3d4f1f64c5",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: fix formatting issues here",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
        "lineNumber": 14,
        "timestamp": "2025-07-31T06:37:00.551Z",
        "metadata": {
          "todoText": "fix formatting issues here",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.554Z",
          "endTime": "2025-07-31T06:37:00.569Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action a4312f1e-50d9-4e11-91c9-4d3d4f1f64c5: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: fix formatting issues here\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "calculator.js-14-1753943801769",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "line": 14,
          "column": 4,
          "content": "fix formatting issues here",
          "context": {
            "before": [
              "    return result;",
              "  }",
              "  subtract(a, b) {"
            ],
            "after": [
              "    const result = a - b;",
              "    this.history.push({ operation: 'subtract', a, b, result });",
              "    return result;"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample JavaScript file for testing TODO detection\nclass Calculator {\n  constructor() {\n    // TODO: add proper initialization\n    this.history = [];\n  }\n  add(a, b) {\n    // TODO: add input validation\n    const result = a + b;\n    this.history.push({ operation: 'add', a, b, result });\n    return result;\n  }\n  subtract(a, b) {\n    // TODO: fix formatting issues here\n    const result = a - b;\n    this.history.push({ operation: 'subtract', a, b, result });\n    return result;\n  }\n  multiply(a, b) {\n    // TODO: update documentation for this method\n    const result = a * b;\n    this.history.push({ operation: 'multiply', a, b, result });\n    return result;\n  }\n  divide(a, b) {\n    // TODO: handle division by zero\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    const result = a / b;\n    this.history.push({ operation: 'divide', a, b, result });\n    return result;\n  }\n  getHistory() {\n    // TODO: rename getHistory to getCalculationHistory\n    return this.history;\n  }\n  clearHistory() {\n    // TODO: implement proper cleanup logic\n    this.history = [];\n  }\n}\nmodule.exports = Calculator;",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.551Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 20,
      "action": {
        "id": "9f97b99c-ad67-40f1-bd6c-fa6dbc86c901",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation for this method",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
        "lineNumber": 20,
        "timestamp": "2025-07-31T06:37:00.576Z",
        "metadata": {
          "todoText": "update documentation for this method",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.580Z",
          "endTime": "2025-07-31T06:37:00.599Z",
          "duration": 5,
          "output": "t",
          "error": "Git Error: Failed to commit changes for action 9f97b99c-ad67-40f1-bd6c-fa6dbc86c901: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation for this method\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "calculator.js-20-1753943801769",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/calculator.js",
          "line": 20,
          "column": 4,
          "content": "update documentation for this method",
          "context": {
            "before": [
              "    return result;",
              "  }",
              "  multiply(a, b) {"
            ],
            "after": [
              "    const result = a * b;",
              "    this.history.push({ operation: 'multiply', a, b, result });",
              "    return result;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Sample JavaScript file for testing TODO detection\nclass Calculator {\n  constructor() {\n    // TODO: add proper initialization\n    this.history = [];\n  }\n  add(a, b) {\n    // TODO: add input validation\n    const result = a + b;\n    this.history.push({ operation: 'add', a, b, result });\n    return result;\n  }\n  subtract(a, b) {\n    // TODO: fix formatting issues here\n    const result = a - b;\n    this.history.push({ operation: 'subtract', a, b, result });\n    return result;\n  }\n  multiply(a, b) {\n    // TODO: update documentation for this method\n    const result = a * b;\n    this.history.push({ operation: 'multiply', a, b, result });\n    return result;\n  }\n  divide(a, b) {\n    // TODO: handle division by zero\n    if (b === 0) {\n      throw new Error('Division by zero');\n    }\n    const result = a / b;\n    this.history.push({ operation: 'divide', a, b, result });\n    return result;\n  }\n  getHistory() {\n    // TODO: rename getHistory to getCalculationHistory\n    return this.history;\n  }\n  clearHistory() {\n    // TODO: implement proper cleanup logic\n    this.history = [];\n  }\n}\nmodule.exports = Calculator;",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.578Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 21,
      "action": {
        "id": "439d952b-f987-4115-b483-f3b2ff72cf0b",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: add comment explaining this method",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 7,
        "timestamp": "2025-07-31T06:37:00.614Z",
        "metadata": {
          "todoText": "add comment explaining this method",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:00.616Z",
          "endTime": "2025-07-31T06:37:00.620Z",
          "duration": 4,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-7-1753943820609",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 7,
          "column": 2,
          "content": "add comment explaining this method",
          "context": {
            "before": [
              "t",
              "t",
              "t"
            ],
            "after": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:00.614Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}"
    },
    {
      "stepNumber": 22,
      "action": {
        "id": "982ca134-a397-4606-9f22-4d6a18303633",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "fix_formatting",
        "status": "pending",
        "description": "Apply Fix Formatting to: fix formatting",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 11,
        "timestamp": "2025-07-31T06:37:10.672Z",
        "metadata": {
          "todoText": "fix formatting",
          "patternId": "fix-formatting",
          "confidence": 0.85,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:10.675Z",
          "endTime": "2025-07-31T06:37:10.689Z",
          "duration": 1,
          "output": "No formatting issues found",
          "error": "Git Error: Failed to commit changes for action 982ca134-a397-4606-9f22-4d6a18303633: Command failed: git commit -m \"[MCP Auto] Apply Fix Formatting to: fix formatting\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-11-1753943820609",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 11,
          "column": 2,
          "content": "fix formatting",
          "context": {
            "before": [
              "  static capitalize(str: string): string {",
              "    return str.charAt(0).toUpperCase() + str.slice(1);",
              "  }"
            ],
            "after": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:10.672Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 23,
      "action": {
        "id": "b923a77d-944f-486e-b3fc-35c6eb91ba0d",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "update_documentation",
        "status": "pending",
        "description": "Apply Update Documentation to: update documentation with examples",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
        "lineNumber": 15,
        "timestamp": "2025-07-31T06:37:10.693Z",
        "metadata": {
          "todoText": "update documentation with examples",
          "patternId": "update-documentation",
          "confidence": 0.8,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:10.695Z",
          "endTime": "2025-07-31T06:37:10.713Z",
          "duration": 1,
          "output": "e",
          "error": "Git Error: Failed to commit changes for action b923a77d-944f-486e-b3fc-35c6eb91ba0d: Command failed: git commit -m \"[MCP Auto] Apply Update Documentation to: update documentation with examples\"\n"
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "utils.ts-15-1753943820609",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/utils.ts",
          "line": 15,
          "column": 2,
          "content": "update documentation with examples",
          "context": {
            "before": [
              "  static reverse(str:string):string{",
              "    return str.split('').reverse().join('');",
              "  }"
            ],
            "after": [
              "  static truncate(str: string, maxLength: number): string {",
              "    if (str.length <= maxLength) {",
              "      return str;"
            ]
          },
          "type": "TODO",
          "confidence": 0.7
        }
      },
      "fileStateBefore": "// Sample TypeScript utility functions\nexport class StringUtils {\nt\nt\nt\nt\nt\n  // TODO: add comment explaining this method\n  static capitalize(str: string): string {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  // TODO: fix formatting\n  static reverse(str:string):string{\n    return str.split('').reverse().join('');\n  }\n  // TODO: update documentation with examples\n  static truncate(str: string, maxLength: number): string {\n    if (str.length <= maxLength) {\n      return str;\n    }\n    return str.substring(0, maxLength - 3) + '...';\n  }\n  // TODO: rename camelCase to toCamelCase\n  static camelCase(str: string): string {\n    return str\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+(.)/g, (match, char) => char.toUpperCase());\n  }\n}\nexport class NumberUtils {\n  // TODO: add proper error handling\n  static factorial(n: number): number {\n    if (n < 0) return -1;\n    if (n === 0) return 1;\n    return n * NumberUtils.factorial(n - 1);\n  }\n  // TODO: implement proper validation\n  static isPrime(n: number): boolean {\n    if (n < 2) return false;\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:10.694Z"
      },
      "debugInfo": {}
    },
    {
      "stepNumber": 24,
      "action": {
        "id": "00143d62-f06d-4ff4-9c50-bbf1f6306827",
        "sessionId": "2a456a98-7ed5-4b59-8608-95afd6a98633",
        "type": "add_comment",
        "status": "pending",
        "description": "Apply Add Comment to: Add comment about this method functionality",
        "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
        "lineNumber": 7,
        "timestamp": "2025-07-31T06:37:10.722Z",
        "metadata": {
          "todoText": "Add comment about this method functionality",
          "patternId": "add-comment",
          "confidence": 0.9,
          "riskLevel": "low",
          "estimatedDuration": 1000,
          "requiresApproval": false
        },
        "execution": {
          "startTime": "2025-07-31T06:37:10.725Z",
          "endTime": "2025-07-31T06:37:10.727Z",
          "duration": 2,
          "output": "Added comment: t",
          "error": ""
        },
        "changes": {
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "beforeChecksum": ""
        },
        "todo": {
          "id": "test-a2.ts-7-1753943820609",
          "filePath": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace/test-a2.ts",
          "line": 7,
          "column": 2,
          "content": "Add comment about this method functionality",
          "context": {
            "before": [
              "t",
              "t",
              "t"
            ],
            "after": [
              "  testMethod() {",
              "    return 'test';",
              "  }"
            ]
          },
          "type": "TODO",
          "confidence": 0.8
        }
      },
      "fileStateBefore": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}",
      "environmentState": {
        "workingDirectory": "/home/xbyooki/github_copilot_TODOMCP/sample-workspace",
        "timestamp": "2025-07-31T06:37:10.723Z"
      },
      "debugInfo": {},
      "fileStateAfter": "// Test file for A2 - Error Context Collection\n// Contains properly formatted TODOs to test safety thresholds\nexport class TestClass {\nt\nt\nt\nt\n  // TODO: Add comment about this method functionality\n  testMethod() {\n    return 'test';\n  }\n  // TODO: Fix formatting in this code block\n  badlyFormatted() {\n    let    x   =    1;\n      return     x;\n  }\n  // TODO: Add import for lodash utility\n  processData() {\n    // Would use lodash here\n    return [];\n  }\n  // TODO: Update documentation for this complex algorithm\n  complexAlgorithm() {\n    // Complex logic here\n    return 42;\n  }\n}"
    }
  ],
  "metadata": {
    "totalSteps": 24,
    "startTime": "2025-07-31T06:36:22.736Z",
    "status": "recording"
  }
}
